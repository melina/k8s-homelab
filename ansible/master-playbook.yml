---
- hosts: all
  become: yes
  pre_tasks:
    - name: Install python for Ansible to work
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
      changed_when: false
  
  tasks:
    - name: Force ipv4 for apt-get
      shell: echo 'Acquire::ForceIPv4 "true";' | sudo tee /etc/apt/apt.conf.d/99force-ipv4

    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
        - git
        - vim
        - dnsutils
        - bash-completion

    - name: Add an apt signing key for Docker
      shell: curl -4fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present

    - name: Install docker and its dependecies
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - docker-ce 
        - docker-ce-cli 
        - containerd.io
      notify:
        - docker status

    - name: Add vagrant user to docker group
      user:
        name: vagrant
        group: docker
        
    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none
    
    - name: Disable swap
      command: swapoff -a
    
    - name: Add an apt signing key for Kubernetes
      shell: curl -4fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list
    
    - name: Install Kubernetes binaries
      become: true
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet=1.13.1-00
          - kubeadm=1.13.1-00
          - kubectl=1.13.1-00
          - kubernetes-cni=0.6.0-00
    
    - name : Check if kubeadm init has run 
      stat:
        path: "/etc/kubernetes/pki/ca.key"
      register: kubeadm_init

    - name: Initialize the Kubernetes cluster using kubeadm
      become: true
      command: kubeadm init --kubernetes-version 1.13.1 --apiserver-advertise-address 172.16.30.2  --pod-network-cidr 192.168.0.0/16 | tee kubedns-init.out
      when: not kubeadm_init.stat.exists
      run_once: yes


    - name: kubectl bash completion
      become_user: vagrant
      shell: source <(kubectl completion bash)
      args:
        executable: /bin/bash

    - name: add kubectl bash completion
      become_user: vagrant
      lineinfile:
        path: ~/.bashrc
        line: source <(kubectl completion bash)
        state: present

    - name: Create .kube directory
      file:
        path: /home/vagrant/.kube
        owner: vagrant
        group: vagrant
        state: directory

    - name: Copy /etc/kubernetes/admin.conf ==>  /home/vagrant/.kube/config
      become: yes
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/vagrant/.kube/config
        owner: vagrant
        group: vagrant
        remote_src: yes

    # Setup Calico 

    - name: Check if Calico exists
      become_user: vagrant
      shell: kubectl get deployments -n kube-system | grep calico
      register: calico_exists
      ignore_errors: true

    - name: Download calico.yaml
      get_url:
        url: https://docs.projectcalico.org/v3.7/manifests/calico.yaml
        dest: /home/vagrant/
      when: calico_exists is failed
    
    - name: Configure Calico networking
      become_user: vagrant
      command: kubectl create -f /home/vagrant/calico.yaml
      when: calico_exists is failed

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Copy join command to local file
      sudo: no
      local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

  handlers:
    - name: docker status
      service: 
        name: docker 
        state: started
